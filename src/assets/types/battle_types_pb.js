/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.Battle2Response', null, global);
goog.exportSymbol('proto.BattleAction', null, global);
goog.exportSymbol('proto.BattleDevRequest', null, global);
goog.exportSymbol('proto.BattleDevResponse', null, global);
goog.exportSymbol('proto.BattleResponse', null, global);
goog.exportSymbol('proto.NullMessage', null, global);
goog.exportSymbol('proto.Skill', null, global);
goog.exportSymbol('proto.Unit', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.NullMessage = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.NullMessage, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.NullMessage.displayName = 'proto.NullMessage';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.NullMessage.prototype.toObject = function(opt_includeInstance) {
  return proto.NullMessage.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.NullMessage} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NullMessage.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.NullMessage}
 */
proto.NullMessage.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.NullMessage;
  return proto.NullMessage.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.NullMessage} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.NullMessage}
 */
proto.NullMessage.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.NullMessage.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.NullMessage.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.NullMessage} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.NullMessage.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BattleResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BattleResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BattleResponse.displayName = 'proto.BattleResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BattleResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BattleResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BattleResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BattleResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionCounts: jspb.Message.getFieldWithDefault(msg, 1, 0),
    win: jspb.Message.getFieldWithDefault(msg, 2, false),
    winnerCode: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BattleResponse}
 */
proto.BattleResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BattleResponse;
  return proto.BattleResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BattleResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BattleResponse}
 */
proto.BattleResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionCounts(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWinnerCode(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BattleResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BattleResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BattleResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BattleResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionCounts();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getWin();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getWinnerCode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
};


/**
 * optional uint32 action_counts = 1;
 * @return {number}
 */
proto.BattleResponse.prototype.getActionCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BattleResponse.prototype.setActionCounts = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool win = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.BattleResponse.prototype.getWin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.BattleResponse.prototype.setWin = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 winner_code = 3;
 * @return {number}
 */
proto.BattleResponse.prototype.getWinnerCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BattleResponse.prototype.setWinnerCode = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Battle2Response = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Battle2Response.repeatedFields_, null);
};
goog.inherits(proto.Battle2Response, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Battle2Response.displayName = 'proto.Battle2Response';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Battle2Response.repeatedFields_ = [4];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Battle2Response.prototype.toObject = function(opt_includeInstance) {
  return proto.Battle2Response.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Battle2Response} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Battle2Response.toObject = function(includeInstance, msg) {
  var f, obj = {
    battleId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    win: jspb.Message.getFieldWithDefault(msg, 2, false),
    winnerCode: jspb.Message.getFieldWithDefault(msg, 3, 0),
    actionsList: jspb.Message.toObjectList(msg.getActionsList(),
    proto.BattleAction.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Battle2Response}
 */
proto.Battle2Response.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Battle2Response;
  return proto.Battle2Response.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Battle2Response} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Battle2Response}
 */
proto.Battle2Response.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattleId(value);
      break;
    case 2:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setWin(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setWinnerCode(value);
      break;
    case 4:
      var value = new proto.BattleAction;
      reader.readMessage(value,proto.BattleAction.deserializeBinaryFromReader);
      msg.addActions(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Battle2Response.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Battle2Response.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Battle2Response} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Battle2Response.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBattleId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getWin();
  if (f) {
    writer.writeBool(
      2,
      f
    );
  }
  f = message.getWinnerCode();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getActionsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      4,
      f,
      proto.BattleAction.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 battle_id = 1;
 * @return {number}
 */
proto.Battle2Response.prototype.getBattleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Battle2Response.prototype.setBattleId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional bool win = 2;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Battle2Response.prototype.getWin = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 2, false));
};


/** @param {boolean} value */
proto.Battle2Response.prototype.setWin = function(value) {
  jspb.Message.setProto3BooleanField(this, 2, value);
};


/**
 * optional uint32 winner_code = 3;
 * @return {number}
 */
proto.Battle2Response.prototype.getWinnerCode = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Battle2Response.prototype.setWinnerCode = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated BattleAction actions = 4;
 * @return {!Array.<!proto.BattleAction>}
 */
proto.Battle2Response.prototype.getActionsList = function() {
  return /** @type{!Array.<!proto.BattleAction>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.BattleAction, 4));
};


/** @param {!Array.<!proto.BattleAction>} value */
proto.Battle2Response.prototype.setActionsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 4, value);
};


/**
 * @param {!proto.BattleAction=} opt_value
 * @param {number=} opt_index
 * @return {!proto.BattleAction}
 */
proto.Battle2Response.prototype.addActions = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 4, opt_value, proto.BattleAction, opt_index);
};


proto.Battle2Response.prototype.clearActionsList = function() {
  this.setActionsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BattleAction = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BattleAction.repeatedFields_, null);
};
goog.inherits(proto.BattleAction, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BattleAction.displayName = 'proto.BattleAction';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BattleAction.repeatedFields_ = [4,6];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BattleAction.prototype.toObject = function(opt_includeInstance) {
  return proto.BattleAction.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BattleAction} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BattleAction.toObject = function(includeInstance, msg) {
  var f, obj = {
    actionCounts: jspb.Message.getFieldWithDefault(msg, 1, 0),
    actionPosition: jspb.Message.getFieldWithDefault(msg, 2, 0),
    skillId: jspb.Message.getFieldWithDefault(msg, 3, 0),
    effectUnitsList: jspb.Message.getRepeatedField(msg, 4),
    poisonDamage: jspb.Message.getFieldWithDefault(msg, 5, 0),
    unitsList: jspb.Message.toObjectList(msg.getUnitsList(),
    proto.Unit.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BattleAction}
 */
proto.BattleAction.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BattleAction;
  return proto.BattleAction.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BattleAction} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BattleAction}
 */
proto.BattleAction.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionCounts(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActionPosition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSkillId(value);
      break;
    case 4:
      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());
      msg.setEffectUnitsList(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPoisonDamage(value);
      break;
    case 6:
      var value = new proto.Unit;
      reader.readMessage(value,proto.Unit.deserializeBinaryFromReader);
      msg.addUnits(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BattleAction.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BattleAction.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BattleAction} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BattleAction.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getActionCounts();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getActionPosition();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSkillId();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getEffectUnitsList();
  if (f.length > 0) {
    writer.writePackedBool(
      4,
      f
    );
  }
  f = message.getPoisonDamage();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getUnitsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.Unit.serializeBinaryToWriter
    );
  }
};


/**
 * optional uint32 action_counts = 1;
 * @return {number}
 */
proto.BattleAction.prototype.getActionCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BattleAction.prototype.setActionCounts = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 action_position = 2;
 * @return {number}
 */
proto.BattleAction.prototype.getActionPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BattleAction.prototype.setActionPosition = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 skill_id = 3;
 * @return {number}
 */
proto.BattleAction.prototype.getSkillId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.BattleAction.prototype.setSkillId = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated bool effect_units = 4;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array.<boolean>}
 */
proto.BattleAction.prototype.getEffectUnitsList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<boolean>} value */
proto.BattleAction.prototype.setEffectUnitsList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.BattleAction.prototype.addEffectUnits = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.BattleAction.prototype.clearEffectUnitsList = function() {
  this.setEffectUnitsList([]);
};


/**
 * optional uint32 poison_damage = 5;
 * @return {number}
 */
proto.BattleAction.prototype.getPoisonDamage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.BattleAction.prototype.setPoisonDamage = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * repeated Unit units = 6;
 * @return {!Array.<!proto.Unit>}
 */
proto.BattleAction.prototype.getUnitsList = function() {
  return /** @type{!Array.<!proto.Unit>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.Unit, 6));
};


/** @param {!Array.<!proto.Unit>} value */
proto.BattleAction.prototype.setUnitsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


/**
 * @param {!proto.Unit=} opt_value
 * @param {number=} opt_index
 * @return {!proto.Unit}
 */
proto.BattleAction.prototype.addUnits = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 6, opt_value, proto.Unit, opt_index);
};


proto.BattleAction.prototype.clearUnitsList = function() {
  this.setUnitsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Unit = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Unit, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Unit.displayName = 'proto.Unit';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Unit.prototype.toObject = function(opt_includeInstance) {
  return proto.Unit.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Unit} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Unit.toObject = function(includeInstance, msg) {
  var f, obj = {
    position: jspb.Message.getFieldWithDefault(msg, 1, 0),
    hp: jspb.Message.getFieldWithDefault(msg, 2, 0),
    phy: jspb.Message.getFieldWithDefault(msg, 3, 0),
    pb_int: jspb.Message.getFieldWithDefault(msg, 4, 0),
    agi: jspb.Message.getFieldWithDefault(msg, 5, 0),
    charge: jspb.Message.getFieldWithDefault(msg, 6, 0),
    activeCounts: jspb.Message.getFieldWithDefault(msg, 7, 0),
    state: jspb.Message.getFieldWithDefault(msg, 8, 0),
    passiveEnabled: jspb.Message.getFieldWithDefault(msg, 9, false)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Unit}
 */
proto.Unit.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Unit;
  return proto.Unit.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Unit} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Unit}
 */
proto.Unit.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPosition(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setHp(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setPhy(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setInt(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setAgi(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCharge(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setActiveCounts(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setState(value);
      break;
    case 9:
      var value = /** @type {boolean} */ (reader.readBool());
      msg.setPassiveEnabled(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Unit.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Unit.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Unit} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Unit.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getPosition();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getHp();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getPhy();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getInt();
  if (f !== 0) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = message.getAgi();
  if (f !== 0) {
    writer.writeUint32(
      5,
      f
    );
  }
  f = message.getCharge();
  if (f !== 0) {
    writer.writeUint32(
      6,
      f
    );
  }
  f = message.getActiveCounts();
  if (f !== 0) {
    writer.writeUint32(
      7,
      f
    );
  }
  f = message.getState();
  if (f !== 0) {
    writer.writeUint32(
      8,
      f
    );
  }
  f = message.getPassiveEnabled();
  if (f) {
    writer.writeBool(
      9,
      f
    );
  }
};


/**
 * optional uint32 position = 1;
 * @return {number}
 */
proto.Unit.prototype.getPosition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Unit.prototype.setPosition = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 hp = 2;
 * @return {number}
 */
proto.Unit.prototype.getHp = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Unit.prototype.setHp = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 phy = 3;
 * @return {number}
 */
proto.Unit.prototype.getPhy = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Unit.prototype.setPhy = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * optional uint32 int = 4;
 * @return {number}
 */
proto.Unit.prototype.getInt = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/** @param {number} value */
proto.Unit.prototype.setInt = function(value) {
  jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional uint32 agi = 5;
 * @return {number}
 */
proto.Unit.prototype.getAgi = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/** @param {number} value */
proto.Unit.prototype.setAgi = function(value) {
  jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional uint32 charge = 6;
 * @return {number}
 */
proto.Unit.prototype.getCharge = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/** @param {number} value */
proto.Unit.prototype.setCharge = function(value) {
  jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional uint32 active_counts = 7;
 * @return {number}
 */
proto.Unit.prototype.getActiveCounts = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/** @param {number} value */
proto.Unit.prototype.setActiveCounts = function(value) {
  jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional uint32 state = 8;
 * @return {number}
 */
proto.Unit.prototype.getState = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 8, 0));
};


/** @param {number} value */
proto.Unit.prototype.setState = function(value) {
  jspb.Message.setProto3IntField(this, 8, value);
};


/**
 * optional bool passive_enabled = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {boolean}
 */
proto.Unit.prototype.getPassiveEnabled = function() {
  return /** @type {boolean} */ (jspb.Message.getFieldWithDefault(this, 9, false));
};


/** @param {boolean} value */
proto.Unit.prototype.setPassiveEnabled = function(value) {
  jspb.Message.setProto3BooleanField(this, 9, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BattleDevRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.BattleDevRequest.repeatedFields_, null);
};
goog.inherits(proto.BattleDevRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BattleDevRequest.displayName = 'proto.BattleDevRequest';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.BattleDevRequest.repeatedFields_ = [3];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BattleDevRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.BattleDevRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BattleDevRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BattleDevRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
    battleId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    randomSeed: jspb.Message.getFieldWithDefault(msg, 2, 0),
    dataList: jspb.Message.getRepeatedField(msg, 3)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BattleDevRequest}
 */
proto.BattleDevRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BattleDevRequest;
  return proto.BattleDevRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BattleDevRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BattleDevRequest}
 */
proto.BattleDevRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setBattleId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRandomSeed(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.addData(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BattleDevRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BattleDevRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BattleDevRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BattleDevRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBattleId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getRandomSeed();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getDataList();
  if (f.length > 0) {
    writer.writeRepeatedString(
      3,
      f
    );
  }
};


/**
 * optional uint32 battle_id = 1;
 * @return {number}
 */
proto.BattleDevRequest.prototype.getBattleId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BattleDevRequest.prototype.setBattleId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 random_seed = 2;
 * @return {number}
 */
proto.BattleDevRequest.prototype.getRandomSeed = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.BattleDevRequest.prototype.setRandomSeed = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * repeated string data = 3;
 * @return {!Array.<string>}
 */
proto.BattleDevRequest.prototype.getDataList = function() {
  return /** @type {!Array.<string>} */ (jspb.Message.getRepeatedField(this, 3));
};


/** @param {!Array.<string>} value */
proto.BattleDevRequest.prototype.setDataList = function(value) {
  jspb.Message.setField(this, 3, value || []);
};


/**
 * @param {!string} value
 * @param {number=} opt_index
 */
proto.BattleDevRequest.prototype.addData = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 3, value, opt_index);
};


proto.BattleDevRequest.prototype.clearDataList = function() {
  this.setDataList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.BattleDevResponse = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.BattleDevResponse, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.BattleDevResponse.displayName = 'proto.BattleDevResponse';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.BattleDevResponse.prototype.toObject = function(opt_includeInstance) {
  return proto.BattleDevResponse.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.BattleDevResponse} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BattleDevResponse.toObject = function(includeInstance, msg) {
  var f, obj = {
    result: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.BattleDevResponse}
 */
proto.BattleDevResponse.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.BattleDevResponse;
  return proto.BattleDevResponse.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.BattleDevResponse} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.BattleDevResponse}
 */
proto.BattleDevResponse.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setResult(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.BattleDevResponse.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.BattleDevResponse.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.BattleDevResponse} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.BattleDevResponse.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getResult();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
};


/**
 * optional uint32 result = 1;
 * @return {number}
 */
proto.BattleDevResponse.prototype.getResult = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.BattleDevResponse.prototype.setResult = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Skill = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.Skill.repeatedFields_, null);
};
goog.inherits(proto.Skill, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Skill.displayName = 'proto.Skill';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.Skill.repeatedFields_ = [4,5,6,7,8,9];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Skill.prototype.toObject = function(opt_includeInstance) {
  return proto.Skill.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Skill} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Skill.toObject = function(includeInstance, msg) {
  var f, obj = {
    skillId: jspb.Message.getFieldWithDefault(msg, 1, 0),
    skillCondition: jspb.Message.getFieldWithDefault(msg, 2, 0),
    skillConditionRate: jspb.Message.getFieldWithDefault(msg, 3, 0),
    targetList: jspb.Message.getRepeatedField(msg, 4),
    paramList: jspb.Message.getRepeatedField(msg, 5),
    calcList: jspb.Message.getRepeatedField(msg, 6),
    rateList: jspb.Message.getRepeatedField(msg, 7),
    minRateList: jspb.Message.getRepeatedField(msg, 8),
    damageList: jspb.Message.getRepeatedField(msg, 9)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Skill}
 */
proto.Skill.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Skill;
  return proto.Skill.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Skill} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Skill}
 */
proto.Skill.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSkillId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSkillCondition(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setSkillConditionRate(value);
      break;
    case 4:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setTargetList(value);
      break;
    case 5:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setParamList(value);
      break;
    case 6:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setCalcList(value);
      break;
    case 7:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setRateList(value);
      break;
    case 8:
      var value = /** @type {!Array.<number>} */ (reader.readPackedUint32());
      msg.setMinRateList(value);
      break;
    case 9:
      var value = /** @type {!Array.<boolean>} */ (reader.readPackedBool());
      msg.setDamageList(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Skill.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.Skill.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.Skill} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.Skill.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getSkillId();
  if (f !== 0) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = message.getSkillCondition();
  if (f !== 0) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = message.getSkillConditionRate();
  if (f !== 0) {
    writer.writeUint32(
      3,
      f
    );
  }
  f = message.getTargetList();
  if (f.length > 0) {
    writer.writePackedUint32(
      4,
      f
    );
  }
  f = message.getParamList();
  if (f.length > 0) {
    writer.writePackedUint32(
      5,
      f
    );
  }
  f = message.getCalcList();
  if (f.length > 0) {
    writer.writePackedUint32(
      6,
      f
    );
  }
  f = message.getRateList();
  if (f.length > 0) {
    writer.writePackedUint32(
      7,
      f
    );
  }
  f = message.getMinRateList();
  if (f.length > 0) {
    writer.writePackedUint32(
      8,
      f
    );
  }
  f = message.getDamageList();
  if (f.length > 0) {
    writer.writePackedBool(
      9,
      f
    );
  }
};


/**
 * optional uint32 skill_id = 1;
 * @return {number}
 */
proto.Skill.prototype.getSkillId = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/** @param {number} value */
proto.Skill.prototype.setSkillId = function(value) {
  jspb.Message.setProto3IntField(this, 1, value);
};


/**
 * optional uint32 skill_condition = 2;
 * @return {number}
 */
proto.Skill.prototype.getSkillCondition = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 2, 0));
};


/** @param {number} value */
proto.Skill.prototype.setSkillCondition = function(value) {
  jspb.Message.setProto3IntField(this, 2, value);
};


/**
 * optional uint32 skill_condition_rate = 3;
 * @return {number}
 */
proto.Skill.prototype.getSkillConditionRate = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/** @param {number} value */
proto.Skill.prototype.setSkillConditionRate = function(value) {
  jspb.Message.setProto3IntField(this, 3, value);
};


/**
 * repeated uint32 target = 4;
 * @return {!Array.<number>}
 */
proto.Skill.prototype.getTargetList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 4));
};


/** @param {!Array.<number>} value */
proto.Skill.prototype.setTargetList = function(value) {
  jspb.Message.setField(this, 4, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Skill.prototype.addTarget = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 4, value, opt_index);
};


proto.Skill.prototype.clearTargetList = function() {
  this.setTargetList([]);
};


/**
 * repeated uint32 param = 5;
 * @return {!Array.<number>}
 */
proto.Skill.prototype.getParamList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 5));
};


/** @param {!Array.<number>} value */
proto.Skill.prototype.setParamList = function(value) {
  jspb.Message.setField(this, 5, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Skill.prototype.addParam = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 5, value, opt_index);
};


proto.Skill.prototype.clearParamList = function() {
  this.setParamList([]);
};


/**
 * repeated uint32 calc = 6;
 * @return {!Array.<number>}
 */
proto.Skill.prototype.getCalcList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 6));
};


/** @param {!Array.<number>} value */
proto.Skill.prototype.setCalcList = function(value) {
  jspb.Message.setField(this, 6, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Skill.prototype.addCalc = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 6, value, opt_index);
};


proto.Skill.prototype.clearCalcList = function() {
  this.setCalcList([]);
};


/**
 * repeated uint32 rate = 7;
 * @return {!Array.<number>}
 */
proto.Skill.prototype.getRateList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 7));
};


/** @param {!Array.<number>} value */
proto.Skill.prototype.setRateList = function(value) {
  jspb.Message.setField(this, 7, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Skill.prototype.addRate = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 7, value, opt_index);
};


proto.Skill.prototype.clearRateList = function() {
  this.setRateList([]);
};


/**
 * repeated uint32 min_rate = 8;
 * @return {!Array.<number>}
 */
proto.Skill.prototype.getMinRateList = function() {
  return /** @type {!Array.<number>} */ (jspb.Message.getRepeatedField(this, 8));
};


/** @param {!Array.<number>} value */
proto.Skill.prototype.setMinRateList = function(value) {
  jspb.Message.setField(this, 8, value || []);
};


/**
 * @param {!number} value
 * @param {number=} opt_index
 */
proto.Skill.prototype.addMinRate = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 8, value, opt_index);
};


proto.Skill.prototype.clearMinRateList = function() {
  this.setMinRateList([]);
};


/**
 * repeated bool damage = 9;
 * Note that Boolean fields may be set to 0/1 when serialized from a Java server.
 * You should avoid comparisons like {@code val === true/false} in those cases.
 * @return {!Array.<boolean>}
 */
proto.Skill.prototype.getDamageList = function() {
  return /** @type {!Array.<boolean>} */ (jspb.Message.getRepeatedField(this, 9));
};


/** @param {!Array.<boolean>} value */
proto.Skill.prototype.setDamageList = function(value) {
  jspb.Message.setField(this, 9, value || []);
};


/**
 * @param {!boolean} value
 * @param {number=} opt_index
 */
proto.Skill.prototype.addDamage = function(value, opt_index) {
  jspb.Message.addToRepeatedField(this, 9, value, opt_index);
};


proto.Skill.prototype.clearDamageList = function() {
  this.setDamageList([]);
};


goog.object.extend(exports, proto);
